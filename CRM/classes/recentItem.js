//RecentItem data class methods.model.RecentItem = {};//*** Methods//Entity Methods.model.RecentItem.entityMethods = {};//Class methods.model.RecentItem.methods = {};model.RecentItem.methods.newRecentItem = function(dataClassName, titleKey, titleValue, entityKey) {	//Create a new Recent Item if it does not exist yet and	// update the Recent Items and return them.	var dupCollection, dupCollectionLength,		myCurrentUser, myUser,		recentItemArr = [];		//Get the current user session and load their User entity.	myCurrentUser = currentUser(); // we get the user of the current session.	myUser = ds.User.find("ID = :1", myCurrentUser.ID);		if (myUser != null) {		//Check if this recent item already exists. If so, no need to add it.		dupCollection = ds.RecentItem.all();		dupCollectionLength = dupCollection.length		dupItem = ds.RecentItem.find("entityKey = :1 && owner.ID = :2", entityKey, myUser.ID);		if (dupItem != null) {				if (dupItem.sortOrder != 1) { //&& dupItem.sortOrder != dupCollectionLength				renumberRecentItems = ds.RecentItem.query("sortOrder < :1", dupItem.sortOrder);				renumberRecentItems.forEach(function(recentItemEntity) {					recentItemEntity.sortOrder += 1;				});								dupItem.sortOrder = 1;				dupItem.save();			}					} else {		//Not a duplicate, so create new Recent Item.			try {				new ds.RecentItem({					dataClassName: dataClassName,					title: titleKey + titleValue,					entityKey: entityKey,					sortOrder: 0				}).save();				//Now reorder the recent items.				ds.RecentItem.reorderItems();			}			catch(e) {					}			} //if (dupItem != null)			var recentItemsCollection = ds.RecentItem.query("ID > 0 order by sortOrder asc");		recentItemArr = recentItemsCollection.toArray("dataClassName, entityKey, title");	} //if (myUser != null)			return recentItemArr;};model.RecentItem.methods.removeOldRecentItems = function() {	var oldRecentItemsCollection = ds.RecentItem.query("sortOrder > 5");	oldRecentItemsCollection.remove();		/* ***Bug***	//Now check if the latest recent item (sortOrder == 1) is duplicate.	// If we find it again remove the one that is not sortOrder == 1.	var latestRecentItem = ds.RecentItem.find("sortOrder = :1", 1);	var duplicateRecentItem = ds.RecentItem.query("entityKey = :1 && sortOrder != :2", latestRecentItem.entityKey, 1);	if (duplicateRecentItem != null) {		duplicateRecentItem.remove();	}	*/};/*model.RecentItem.methods.getItems = function() {				//return array of my attributes.};*/model.RecentItem.methods.moveToTop = function(recentItemID) {	var moveRecentItem, moveSortOrder;		moveRecentItem = ds.RecentItem.find("ID = :1", recentItemID);	moveSortOrder = moveRecentItem.sortOrder;		renumberRecentItems = ds.RecentItems.query("sortOrder > :1", moveSortOrder);	renumberRecentItems.forEach(function(recentItemEntity) {		recentItemEntity.sortOrder -= 1;	});};model.RecentItem.methods.reorderItems = function() {	var recentItemsCollection = ds.RecentItem.all();	recentItemsCollection.forEach(function(recentItemEntity) {		recentItemEntity.sortOrder += 1;	});		ds.RecentItem.removeOldRecentItems();};//Class methods scope.model.RecentItem.methods.newRecentItem.scope = "public";model.RecentItem.methods.reorderItems.scope ="public";model.RecentItem.methods.moveToTop.scope ="public";//Eventsmodel.RecentItem.events = {};model.RecentItem.events.onValidate = function() {	var err, //dupCollection, dupItem, dupCollectionLength		myCurrentUser = currentUser(), // we get the user of the current session.		myUser = ds.User.find("ID = :1", myCurrentUser.ID);				/*		if (this.isNew()) {				dupCollection = ds.RecentItem.all();			dupCollectionLength = dupCollection.length			dupItem = ds.RecentItem.find("entityKey = :1 && owner.ID = :2", this.entityKey, myUser.ID);			if (dupItem != null) {					//Since this is a duplicate we need to move it to the top of the list				// and reorder the items. 				//Laurent. Is it appropriate to do this here.								if (dupItem.sortOrder != 1) { //&& dupItem.sortOrder != dupCollectionLength					renumberRecentItems = ds.RecentItem.query("sortOrder < :1", dupItem.sortOrder);					renumberRecentItems.forEach(function(recentItemEntity) {						recentItemEntity.sortOrder += 1;					});										dupItem.sortOrder = 1;					dupItem.save();				}								return { error : 9998, errorMessage: "Duplicate Recent Item. Rejected."};			}		}		*/					return err;};//onRestrictingQuery()model.RecentItem.events.onRestrictingQuery = function() {	var myCurrentUser = currentUser(), // we get the user of the current session.		sessionRef = currentSession(), // Get session.		result;			result = ds.RecentItem.createEntityCollection(); //default to empty collection.		if (sessionRef.belongsTo("Admin")) {		result = ds.RecentItem.all();	} else {		result = ds.RecentItem.query("owner.ID = :1", myCurrentUser.ID);	}		return result;};//onInit()model.RecentItem.events.onInit = function() {	var myCurrentUser = currentUser(), // we get the user of the current session.		myUser = ds.User.find("ID = :1", myCurrentUser.ID);		//myUser = ds.User.find("login = :1", myCurrentUser.name);	//debugger;	if ((myCurrentUser !== null) && (myUser !== null)) {//if a user is logged in.				this.owner = myUser;	}		this.converted = false;};