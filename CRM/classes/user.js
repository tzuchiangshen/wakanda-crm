//User data class methods.model.User = {};model.User.password = {};//*** Methods//Entity methods.model.User.entityMethods = {};model.User.entityMethods.validatePassword = function(password){	var ha1 = directory.computeHA1(this.ID, password);	return (ha1 === this.HA1Key); //true if validated, false otherwise.};//Class methods.model.User.methods = {};model.User.methods.addUser = function(signUpData) {	// Add a new user account.	if (loginByPassword(signUpData.email, signUpData.password)) {		return {error: 8020, message: "You are already signed up."};	} else {		//Check if password is enterd the same both times on the Sign Up form.		if (signUpData.password !== signUpData.verifyPassword) {			return {error: 8030, message: "I'm sorry but you did not type in your password the same each time."};		}				var sessionRef = currentSession(), // Get session.			promoteToken = sessionRef.promoteWith("Admin"), //temporarily make this session Admin level.			newUser =  ds.User.createEntity();         	newUser.fullName = signUpData.name;         	newUser.email = signUpData.email;           	newUser.password = signUpData.password;             	debugger;       	       	try {			newUser.save();     // save the entity			sessionRef.unPromote(promoteToken); //put the session back to normal.       		if (loginByPassword(signUpData.email, signUpData.password)) {       			return {error: 8010, message: "Congratulations on your new account " + signUpData.fullName + "!"};       		} else {       			return {error: 8090, message: "I'm sorry but we could not sign you up."};			}		}		catch(e) {			return {error: 8099, message: e.messages[1]};		}			} // end if (loginByPassword(signUpData.login, signUpData.password))};//Class methods scope.model.User.methods.addUser.scope ="public";//Calculated Attributesmodel.User.password.onGet = function() {	return "*****"; //could also return Null.};model.User.password.onSet = function(value) {	this.HA1Key = directory.computeHA1(this.ID, value);};